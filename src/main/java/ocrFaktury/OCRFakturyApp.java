package ocrFaktury;import javafx.application.Application;import javafx.concurrent.Task;import javafx.geometry.Insets;import javafx.geometry.Pos;import javafx.scene.Scene;import javafx.scene.control.*;import javafx.scene.image.Image;import javafx.scene.layout.*;import javafx.scene.paint.Color;import javafx.scene.text.Font;import javafx.scene.text.Text;import javafx.scene.text.TextAlignment;import javafx.scene.transform.Rotate;import javafx.stage.FileChooser;import javafx.stage.Screen;import javafx.stage.Stage;import javafx.stage.StageStyle;import net.sourceforge.tess4j.Tesseract;import net.sourceforge.tess4j.TesseractException;import ocrFaktury.FiltrDanych;import ocrFaktury.login.LoginView;import ocrFaktury.templateCreator.TemplateCreator;import org.apache.pdfbox.pdmodel.PDDocument;import org.apache.pdfbox.rendering.PDFRenderer;import org.kordamp.ikonli.javafx.FontIcon;import java.awt.image.BufferedImage;import java.io.*;import java.nio.file.Files;import java.util.Optional;public class OCRFakturyApp extends Application {    Image background = new Image(getClass().getResource("/images/DC29B025-62D5-455D-8CE8-A5A984655847.PNG").toExternalForm());    private TextArea ocrPreviewArea;    private VBox loadingOverlay;    private Label watermarkLabel;    private final FiltrDanych filtrDanych = new FiltrDanych();    public static void main(String[] args) {        launch(args);    }    @Override    public void start(Stage primaryStage) {            // Utwórz nowe okno logowania            Stage loginStage = new Stage(StageStyle.DECORATED);            // Utwórz instancję widoku logowania            LoginView loginView = new LoginView();            // Pokaż okno logowania, a po sukcesie pokaż główne okno            loginView.show(loginStage, () -> showMainWindow(primaryStage));    }    private void showMainWindow(Stage primaryStage) {        primaryStage.setTitle("High Hawk System OCR/CSV v1.0");        double screenWidth = Screen.getPrimary().getVisualBounds().getWidth();        double screenHeight = Screen.getPrimary().getVisualBounds().getHeight();        VBox navBar = new VBox(20);        navBar.setPadding(new Insets(20));        navBar.setStyle("-fx-background-color: #1e1e1e;");        navBar.setPrefWidth(240);        Button wybierzFaktureBtn = createNavButton("Wczytaj FV", "fas-file-upload");        Button wybierzWieleFaktur = createNavButton("Wczytaj Pakiet FV", "fas-file-upload");        Button eksportujBtn = createNavButton("Eksportuj", "fas-file-export");        Button zapiszCSVBtn = createNavButton("Generuj .CSV", "fas-save");        Button wyborSzablonuBtn = createNavButton("Wybór szablonu FV", "fas-layer-group");        Button stworzSzablonBtn = createNavButton("Stworzenie szablonu FV", "fas-plus-square");        Button bazaDanychBtn = createNavButton("Baza Danych", "fas-database");        Button importWFMagBtn = createNavButton("Import", "fas-file-import");        wybierzFaktureBtn.setOnAction(e -> handleWybierzFakture(primaryStage));        stworzSzablonBtn.setOnAction(e -> {            TemplateCreator creator = new TemplateCreator();            creator.show();        });        navBar.getChildren().addAll(wybierzFaktureBtn, wybierzWieleFaktur, wyborSzablonuBtn, stworzSzablonBtn, bazaDanychBtn, importWFMagBtn, eksportujBtn, zapiszCSVBtn);        Label previewLabel = new Label("PODGLĄD ODCZYTU");        previewLabel.setTextFill(Color.DIMGRAY);        previewLabel.setFont(Font.font(18));        ocrPreviewArea = new TextArea();        ocrPreviewArea.setWrapText(true);        ocrPreviewArea.setEditable(false);        ocrPreviewArea.setStyle("-fx-control-inner-background:#f2f2f2; -fx-text-fill: black;");        StackPane previewStack = new StackPane();        VBox.setVgrow(previewStack, Priority.ALWAYS);        watermarkLabel = new Label("Podgląd danych z FV");        watermarkLabel.setTextFill(Color.RED);        watermarkLabel.setOpacity(0.3);        watermarkLabel.setFont(Font.font("Arial", 40));        watermarkLabel.getTransforms().add(new Rotate(-30));        watermarkLabel.setVisible(false);        VBox previewBox = new VBox(10, previewLabel, previewStack);        previewBox.setPadding(new Insets(20));        previewBox.setStyle("-fx-background-color: #f2f2f2;");        previewBox.setAlignment(Pos.TOP_LEFT);        VBox.setVgrow(previewBox, Priority.ALWAYS);        ProgressIndicator spinner = new ProgressIndicator();        Label loadingLabel = new Label("Trwa odczyt FV...");        loadingLabel.setTextFill(Color.RED);        loadingLabel.setFont(Font.font("Arial", 18));        loadingOverlay = new VBox(20, spinner, loadingLabel);        loadingOverlay.setAlignment(Pos.CENTER);        loadingOverlay.setStyle("-fx-background-color: rgba(255,255,255,0.8);");        loadingOverlay.setVisible(false);        loadingOverlay.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);        previewStack.getChildren().addAll(ocrPreviewArea, watermarkLabel, loadingOverlay);        HBox mainContent = new HBox(navBar, previewBox);        HBox.setHgrow(previewBox, Priority.ALWAYS);        BorderPane root = new BorderPane();        root.setCenter(mainContent);        Scene scene = new Scene(root, screenWidth, screenHeight);        primaryStage.setScene(scene);        primaryStage.setX(Screen.getPrimary().getVisualBounds().getMinX());        primaryStage.setY(Screen.getPrimary().getVisualBounds().getMinY());        primaryStage.setWidth(screenWidth);        primaryStage.setHeight(screenHeight);        primaryStage.show();    }    private Button createNavButton(String text, String iconLiteral) {        FontIcon icon = new FontIcon(iconLiteral);        icon.setIconSize(20);        icon.setIconColor(Color.WHITE);        Button button = new Button(text, icon);        button.setMaxWidth(Double.MAX_VALUE);        button.setStyle("-fx-background-color: #2b2b2b; -fx-text-fill: white; -fx-font-weight: bold; -fx-background-radius: 8px; -fx-cursor: hand; -fx-graphic-text-gap: 12px; -fx-font-size: 14px;");        button.setOnMouseEntered(e -> button.setStyle("-fx-background-color: #a93226; -fx-text-fill: white; -fx-font-weight: bold; -fx-background-radius: 8px; -fx-cursor: hand; -fx-graphic-text-gap: 12px; -fx-font-size: 14px;"));        button.setOnMouseExited(e -> button.setStyle("-fx-background-color: #2b2b2b; -fx-text-fill: white; -fx-font-weight: bold; -fx-background-radius: 8px; -fx-cursor: hand; -fx-graphic-text-gap: 12px; -fx-font-size: 14px;"));        return button;    }    public void handleWybierzFakture(Stage stage) {        FileChooser fileChooser = new FileChooser();        fileChooser.setTitle("Wybierz plik faktury PDF lub obraz");        fileChooser.getExtensionFilters().addAll(                new FileChooser.ExtensionFilter("Obrazy i PDF", "*.png", "*.jpg", "*.jpeg", "*.tif", "*.tiff", "*.bmp", "*.pdf"));        File selectedFile = fileChooser.showOpenDialog(stage);        if (selectedFile != null) {            loadingOverlay.setVisible(true);            watermarkLabel.setVisible(false);            Task<String> ocrTask = new Task<>() {                @Override                protected String call() throws Exception {                    String tessPath = copyTessdataToTemp();                    Tesseract tesseract = new Tesseract();                    tesseract.setDatapath(tessPath);                    tesseract.setLanguage("pol");                    if (selectedFile.getName().toLowerCase().endsWith(".pdf")) {                        return extractTextFromPdf(selectedFile, tesseract);                    } else {                        return tesseract.doOCR(selectedFile);                    }                }            };            ocrTask.setOnSucceeded(e -> {                String ocrText = ocrTask.getValue();                ocrPreviewArea.setText(ocrText);                loadingOverlay.setVisible(false);                watermarkLabel.setVisible(true);                // Zapisz dane do tymczasowego pliku TXT                File tymczasowy = new File("temp_faktura.txt");                try (BufferedWriter writer = new BufferedWriter(new FileWriter(tymczasowy))) {                    writer.write(ocrText);                } catch (IOException ex) {                    ex.printStackTrace();                    return;                }                Alert alert = new Alert(Alert.AlertType.CONFIRMATION);                alert.setTitle("Zapis danych");                alert.setHeaderText("Czy chcesz zapisać dane do pliku TXT?");                alert.setContentText("Wybierz 'Zapisz do Bazy Danych' aby wskazać lokalizację zapisu.");                ButtonType zapiszBtn = new ButtonType("Zapisz do Bazy Danych");                ButtonType anulujBtn = new ButtonType("Anuluj");                alert.getButtonTypes().setAll(zapiszBtn, anulujBtn);                Optional<ButtonType> result = alert.showAndWait();                if (result.isPresent() && result.get() == zapiszBtn) {                    FileChooser saveChooser = new FileChooser();                    saveChooser.setTitle("Zapisz plik TXT");                    saveChooser.setInitialFileName("faktura_ocr.txt");                    saveChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Pliki tekstowe", "*.txt"));                    File saveFile = saveChooser.showSaveDialog(stage);                    if (saveFile != null) {                        if (tymczasowy.renameTo(saveFile)) {                            Alert info = new Alert(Alert.AlertType.INFORMATION);                            info.setTitle("Sukces");                            info.setHeaderText(null);                            info.setContentText("Dane zostały zapisane w Bazie.");                            info.showAndWait();                        }                    }                }            });            ocrTask.setOnFailed(e -> {                ocrPreviewArea.setText("Błąd OCR: " + ocrTask.getException().getMessage());                loadingOverlay.setVisible(false);                watermarkLabel.setVisible(false);            });            new Thread(ocrTask).start();        }    }    private String extractTextFromPdf(File pdfFile, Tesseract tesseract) throws IOException, TesseractException {        StringBuilder fullText = new StringBuilder();        PDDocument document = PDDocument.load(pdfFile);        PDFRenderer pdfRenderer = new PDFRenderer(document);        for (int page = 0; page < document.getNumberOfPages(); ++page) {            BufferedImage image = pdfRenderer.renderImageWithDPI(page, 300);            String pageText = tesseract.doOCR(image);            fullText.append("--- STRONA ").append(page + 1).append(" ---\n").append(pageText).append("\n\n");        }        document.close();        return fullText.toString();    }    private String copyTessdataToTemp() {        try {            File tessdataDir = Files.createTempDirectory("tessdata").toFile();            InputStream input = getClass().getResourceAsStream("/tessdata/pol.traineddata");            if (input == null) throw new FileNotFoundException("Nie znaleziono pliku pol.traineddata w zasobach!");            File outputFile = new File(tessdataDir, "pol.traineddata");            try (OutputStream out = new FileOutputStream(outputFile)) {                byte[] buffer = new byte[4096];                int bytesRead;                while ((bytesRead = input.read(buffer)) != -1) {                    out.write(buffer, 0, bytesRead);                }            }            return tessdataDir.getAbsolutePath();        } catch (Exception e) {            throw new RuntimeException("Nie można skopiować tessdata: " + e.getMessage(), e);        }    }}